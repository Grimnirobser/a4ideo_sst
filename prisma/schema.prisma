// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(nanoid())
  username          String?
  email             String?   @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  balance           Float     @default(0.000)
  createdAt         DateTime  @default(now())
  subscribedUserIds String[]
  likedVideoIds     String[]
  dislikedVideoIds  String[]
  admin             Boolean   @default(false)

  createdVideos      Video[]
  approvedVideos     Video[]      @relation("Auditor")
  createdProblemsets Problemset[]
  createdAttempts    Attempt[]
  Comment            Comment[]
  fromTransfers      Transfer[]   @relation("TransferFrom")
  toTransfers        Transfer[]   @relation("TransferTo")
  createdAips        Aip[]
  account            Account?
}

model Account {
  id                String  @id @default(nanoid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Video {
  id           String   @id @default(nanoid())
  userId       String
  title        String
  description  String
  likeCount    Int      @default(0)
  dislikeCount Int      @default(0)
  viewCount    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  thumbnailSrc String
  youtubeId    String
  approved     Boolean  @default(false)
  approvedBy   String?
  suspended    Boolean  @default(false)

  author  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  auditor User? @relation("Auditor", fields: [approvedBy], references: [id], onDelete: Cascade)

  problems Problemset[]
  comments Comment[]
}

model Comment {
  id        String   @id @default(nanoid())
  userId    String
  videoId   String
  text      String
  createdAt DateTime @default(now())

  createdBy User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Problemset {
  id           String   @id @default(nanoid())
  userId       String
  videoId      String
  likeCount    Int      @default(0)
  dislikeCount Int      @default(0)
  createdAt    DateTime @default(now())
  approved     Boolean  @default(false)
  suspended    Boolean  @default(false)

  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  video    Video               @relation(fields: [videoId], references: [id], onDelete: Cascade)
  problems QuestionAndAnswer[]
}

model QuestionAndAnswer {
  id        String   @id @default(nanoid())
  problemId String
  type      String
  question  String
  answer    String
  createdAt DateTime @default(now())

  problem Problemset @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Attempt {
  id           String   @id @default(nanoid())
  userId       String
  problemsetId String
  createdAt    DateTime @default(now())
  correct      Boolean  @default(false)
  score        Float    @default(0.00)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transfer {
  id        String   @id @default(nanoid())
  from      String
  to        String
  amount    Float
  createdAt DateTime @default(now())

  fromUser User @relation("TransferFrom", fields: [from], references: [id], onDelete: Cascade)
  toUser   User @relation("TransferTo", fields: [to], references: [id], onDelete: Cascade)
}

model Aip {
  id        Int      @id @default(autoincrement())
  userId    String
  text      String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
