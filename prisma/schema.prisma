// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(nanoid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())

  account Account?
  channel Channel?
}

model Admin {
  id                 String       @id @default(nanoid())
  username           String       @unique
  password           String
  createdAt          DateTime     @default(now())
  aduitedVideos      Video[]
  aduitedProblemsets Problemset[]
}

model Account {
  id                String  @id @default(nanoid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Channel {
  id                    String   @id @default(nanoid())
  userId                String   @unique
  username              String   @unique
  imageSrc              String
  createdAt             DateTime @default(now())
  subscriberCount       Int      @default(0)
  balance               Float    @default(0.000)
  subscribedChannelIds  String[]
  likedVideoIds         String[]
  dislikedVideoIds      String[]
  likedProblemsetIds    String[]
  dislikedProblemsetIds String[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments    Comment[]
  videos      Video[]
  problemsets Problemset[]
  aips        Aip[]
  attempt     Attempt[]

  fromTransfers Transfer[] @relation("TransferFrom")
  toTransfers   Transfer[] @relation("TransferTo")
}

model Video {
  id           String   @id @default(nanoid())
  channelId    String
  title        String
  description  String
  likeCount    Int      @default(0)
  dislikeCount Int      @default(0)
  viewCount    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  thumbnailSrc String
  youtubeId    String
  approved     Boolean  @default(false)
  auditedBy    String?
  suspended    Boolean  @default(false)

  auditor Admin?  @relation(fields: [auditedBy], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  problemsets Problemset[]
  comments    Comment[]
}

model Comment {
  id        String   @id @default(nanoid())
  videoId   String
  channelId String
  text      String
  createdAt DateTime @default(now())

  video   Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}

model Problemset {
  id           String    @id @default(nanoid())
  channelId    String
  videoId      String
  auditedBy    String?
  likeCount    Int       @default(0)
  dislikeCount Int       @default(0)
  attemptCount Int       @default(0)
  passCount    Int       @default(0)
  createdAt    DateTime  @default(now())
  approved     Boolean   @default(false)
  suspended    Boolean   @default(false)
  passedScore  Float     @default(0.50)
  problems     Problem[]
  channel      Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  video        Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  audited      Admin?    @relation(fields: [auditedBy], references: [id], onDelete: Cascade)
}

model Problem {
  id           String    @id @default(nanoid())
  problemsetId String
  type         String
  question     String
  emphasis     Boolean[]
  answer       String[]
  createdAt    DateTime  @default(now())

  problemset Problemset @relation(fields: [problemsetId], references: [id], onDelete: Cascade)
}

model Attempt {
  id           String   @id @default(nanoid())
  channelId    String
  problemsetId String
  createdAt    DateTime @default(now())
  correct      Boolean  @default(false)
  score        Float    @default(0.00)
  passedBefore Boolean  @default(false) // if the user has passed the problemset before, used to count avg attempt count to pass the problemset

  Channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}

model Transfer {
  id        String   @id @default(nanoid())
  from      String
  to        String
  amount    Float
  createdAt DateTime @default(now())

  fromChannel Channel @relation("TransferFrom", fields: [from], references: [id], onDelete: Cascade)
  toChannel   Channel @relation("TransferTo", fields: [to], references: [id], onDelete: Cascade)
}

model Aip {
  id        Int      @id @default(autoincrement())
  channelId String
  text      String
  createdAt DateTime @default(now())

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}
